import java.io.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Klasse, welche das Greedy-Superstring-Verfahren simuliert
 */
public class GreedySuperString {
    /**
     * Hauptprogramm.
     *
     * @param args Kommandozeilen-Argumente
     */
    public static void main(String[] args) throws IOException{
        String possible1 = "Das Wohltemperierte Klavier (BWV 846–893) ist eine Sammlung von Präludien und Fugen für ein Tasteninstrument von Johann Sebastian Bach in zwei Teilen. Teil I stellte Bach 1722, Teil II 1740/42 fertig. Jeder Teil enthält 24 Satzpaare aus je einem Präludium und einer Fuge in allen Dur- und Molltonarten, chromatisch aufsteigend angeordnet von C-Dur bis h-Moll. Mit dem Begriff Clavier, der alle damaligen Tasteninstrumente umfasste, ließ Bach die Wahl des Instruments für die Ausführung bewusst offen. Die Orgel scheidet in den meisten Fällen aus, da Bach keine separate Pedalstimme notierte oder als solche bezeichnete und die Orgeln seiner Zeit mitteltönig gestimmt waren. Der größte Teil des Werks ist offenbar für Clavichord oder Cembalo konzipiert. Nach einer Äußerung Johann Nikolaus Forkels hatte Bach eine Vorliebe für das Clavichord. Im Nekrolog von 1754 steht dagegen über Bach: Die Clavicymbale wußte er, in der Stimmung, so rein und richtig zu temperiren, daß alle Tonarten schön und gefällig klangen. Das Werk wird heute sowohl auf dem Cembalo als auch auf dem modernen Klavier bzw. Flügel gespielt.";
        String possible2 = "TAAAAAAGAGCCAGGAGTTTTTCTTATACTCGCCCGCCTCGGCTTCCCAGAGTGCTAGGATTACAGGGAGTTTTTCTTTACTTTTTATGAGGATGTTGCAACAAATACTGATGCAACTCCTGGTTAACTGATAAAGTGGTCACCTGAGTAAATCACTGGAGTCCTGAGACCCTTCCTCTAGGATTACAGGCGTTATTATTATTTTTTTGAGACAGTGGCGCTATATCGGCTCACTGCAGCCTCTATGTTGGCCAGACTGAGGATGTTGCAACAAATACTGATGCATAAATAAGAAGGCAGGAAGAAACTTTTGGAGGTGATGGATAGGTTTATGGTAGTCTTAACAGTTGCTTACCTATTGAAAACTTATTTAGAAATGACTTCAGTTGTAAACTCTTCTATGAGAAAACTGAGACTCAAAAAATACAAGTGACCCGTCCACAGGCAGATAGTTAGGACTCTGCAAGGAAAAGAAAAGAGTAAATCACTGGAGATAGTGCATTTCAGAAATGTCTCCGTAAAAAAGAGCCAGGAGTTTTTCTTATACTCGCCCGCCTCGGCTTCCCAGAGTGCTAGGATTACAGGGAGTTTTTCTTTACTTTTTATGAGGATGTTGCAACAAATACTGATGCAACTCCTGGTTAACTGATAAAGTGGTCACCTGAGTAAATCACTGGAGTCCTGAGACCCTTCCTCTAGGATTACAGGCGTTATTATTATTTTTTTGAGACAGTGGCGCTATATCGGCTCACTGCAGCCTCTATGTTGGCCAGACTGAGGATGTTGCAACAAATACTGATGCATAAATAAGAAGGCAGGAAGAAACTTTTGGAGGTGATGGATAGGTTTATGGTAGTCTTAACAGTTGCTTACCTATTGAAAACTTATTTAGAAATGACTTCAGTTGTAAACTCTTCTATGAGAAAACTGAGACTCAAAAAATACAAGTGACCCGTCCACAGGCAGATAGTTAGGACTCTGCAAGGAAAAGAAAAGAGTAAATCACTGGAGATAGTGCATTTCAGAAATGTCTCCGTAAAAAAGAGCCAGGAGTTTTTCTTATACTCGCCCGCCTCGGCTTCCCAGAGTGCTAGGATTACAGGGAGTTTTTCTTTACTTTTTATGAGGATGTTGCAACAAATACTGATGCAACTCCTGGTTAACTGATAAAGTGGTCACCTGAGTAAATCACTGGAGTCCTGAGACCCTTCCTCTAGGATTACAGGCGTTATTATTATTTTTTTGAGACAGTGGCGCTATATCGGCTCACTGCAGCCTCTATGTTGGCCAGACTGAGGATGTTGCAACAAATACTGATGCATAAATAAGAAGGCAGGAAGAAACTTTTGGAGGTGATGGATAGGTTTATGGTAGTCTTAACAGTTGCTTACCTATTGAAAACTTATTTAGAAATGACTTCAGTTGTAAACTCTTCTATGAGAAAACTGAGACTCAAAAAATACAAGTGACCCGTCCACAGGCAGATAGTTAGGACTCTGCAAGGAAAAGAAAAGAGTAAATCACTGGAGATAGTGCATTTCAGAAATGTCTCCGTAAAAAAGAGCCAGGAGTTTTTCTTATACTCGCCCGCCTCGGCTTCCCAGAGTGCTAGGATTACAGGGAGTTTTTCTTTACTTTTTATGAGGATGTTGCAACAAATACTGATGCAACTCCTGGTTAACTGATAAAGTGGTCACCTGAGTAAATCACTGGAGTCCTGAGACCCTTCCTCTAGGATTACAGGCGTTATTATTATTTTTTTGAGACAGTGGCGCTATATCGGCTCACTGCAGCCTCTATGTTGGCCAGACTGAGGATGTTGCAACAAATACTGATGCATAAATAAGAAGGCAGGAAGAAACTTTTGGAGGTGATGGATAGGTTTATGGTAGTCTTAACAGTTGCTTACCTATTGAAAACTTATTTAGAAATGACTTCAGTTGTAAACTCTTCTATGAGAAAACTGAGACTCAAAAAATACAAGTGACCCGTCCACAGGCAGATAGTTAGGACTCTGCAAGGAAAAGAAAAGAGTAAATCACTGGAGATAGTGCATTTCAGAAATGTCTCCG";
        String possible3 = "ACCCCCAGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTAGATTGTGGTGAAATGTCTCCGTTCTGATTCCATAAACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATTTTTTGTATTTTTAGTAGAGACGGGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTTTTCTGTTCCTAAAAAAAGGAAGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCTCTTGTCCTGAGACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAGCATTCCAGCCTGACAGGGGTGATTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGACCCCCAGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTAGATTGTGGTGAAATGTCTCCGTTCTGATTCCATAAACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATTTTTTGTATTTTTAGTAGAGACGGGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTTTTCTGTTCCTAAAAAAAGGAAGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCTCTTGTCCTGAGACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAGCATTCCAGCCTGACAGGGGTGATTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGACCCCCAGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTAGATTGTGGTGAAATGTCTCCGTTCTGATTCCATAAACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATTTTTTGTATTTTTAGTAGAGACGGGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTTTTCTGTTCCTAAAAAAAGGAAGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCTCTTGTCCTGAGACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAGCATTCCAGCCTGACAGGGGTGATTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGACCCCCAGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTAGATTGTGGTGAAATGTCTCCGTTCTGATTCCATAAACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATTTTTTGTATTTTTAGTAGAGACGGGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTTTTCTGTTCCTAAAAAAAGGAAGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCTCTTGTCCTGAGACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAGCATTCCAGCCTGACAGGGGTGATTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGACCCCCAGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTAGATTGTGGTGAAATGTCTCCGTTCTGATTCCATAAACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATTTTTTGTATTTTTAGTAGAGACGGGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTTTTCTGTTCCTAAAAAAAGGAAGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCTCTTGTCCTGAGACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAGCATTCCAGCCTGACAGGGGTGATTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGACCCCCAGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTAGATTGTGGTGAAATGTCTCCGTTCTGATTCCATAAACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATTTTTTGTATTTTTAGTAGAGACGGGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTTTTCTGTTCCTAAAAAAAGGAAGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCTCTTGTCCTGAGACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAGCATTCCAGCCTGACAGGGGTGATTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGACCCCCAGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTAGATTGTGGTGAAATGTCTCCGTTCTGATTCCATAAACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATTTTTTGTATTTTTAGTAGAGACGGGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTTTTCTGTTCCTAAAAAAAGGAAGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCTCTTGTCCTGAGACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAGCATTCCAGCCTGACAGGGGTGATTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGACCCCCAGACCTCAGGTGATCCGCCCGCCTCGGCTTCCCAGAGTGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTCATTTTACAGATGAGAAAACTAGATTGTGGTGAAATGTCTCCGTTCTGATTCCATAAACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTGCAGTGGCGCTATATTTTTTGTATTTTTAGTAGAGACGGGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGGAGTATTGCTAATGTCAGATGACTTGGGAACTAAGAATAAGACATTTAACCTATGCTTAATTGAAATGAAATTTTTTTTCTGTTCCTAAAAAAAGGAAGGCGGAGGCTGGGAAAACTTGAAATGGGGAATGATCGGGGAGCGGCGAGGGGGGACCAGCTCTTGTCCTGAGACCTCAGTAAAGTGGTTTACCTATCTATCTATCTATCTATCTATCTATCTATCTAAGCATTCCAGCCTGACAGGGGTGATTTCCTTCTCACAAAAACCCTGTATGGGAGTTTTTCTTTACTTTTTATTATTATTTTTTTGAGACAAAGTCTCGCTCTGTCTCCCAGGCTGGAGTG";
        String possible4 = "GGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACTGGCGTGCACCACCATGCCACTATTTTTTGTATTTTTAGTGGAAAAAGTCTTCTTTCTTGACTTCAGTTGTAAACTCTTCTATTGCTTTCCATTTTGAATATTAATATGACAGGAAATATCAGATGGAAATATTTATAGATAAGATACCTCTTTGTCTCCTTATTGACAGATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGTGATCCGCTATCCCCAGACTCATCAAAGTGTATACATGGAATATGTAAAGCTTTTATATGTCAGTCACACCTCAGTAAAGTGGTTTACCTATCTATCTATCTACTGGCCAGGGACAAAGCTCTCTTGTCCTGAGACTATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTATGTTGGCCAGACTGGTCTCGAACTCTTGACCTCAGGCGTGAGCCACTGCGCCCAGCCAGGAGTTTTTCTTATACT";


        File dir = new File(".");
        File unbekannterTextDatei = new File(dir.getCanonicalPath() + File.separator + "src" + File.separator + "unbekannterText.txt");
        File unbekannteDNASequenz1Datei = new File(dir.getCanonicalPath() + File.separator + "src" + File.separator + "DNAFragmente1.txt");
        File unbekannteDNASequenz2Datei = new File(dir.getCanonicalPath() + File.separator + "src" + File.separator + "DNAFragmente2.txt");
        File unbekannteDNASequenz3Datei = new File(dir.getCanonicalPath() + File.separator + "src" + File.separator + "DNAFragmente3.txt");

        List<String> unbekannterText = ladeFragmente(unbekannterTextDatei);
        List<String> unbekannteDNASequenz1 = ladeFragmente(unbekannteDNASequenz1Datei);
        List<String> unbekannteDNASequenz2 = ladeFragmente(unbekannteDNASequenz2Datei);
        List<String> unbekannteDNASequenz3 = ladeFragmente(unbekannteDNASequenz3Datei);

        List<String> unbekannterTextOhneTeilstrings = entferneTeilstrings(unbekannterText);
        List<String> unbekannteDNASequenz1OhneTeilstrings = entferneTeilstrings(unbekannteDNASequenz1);
        List<String> unbekannteDNASequenz2OhneTeilstrings = entferneTeilstrings(unbekannteDNASequenz2);
        List<String> unbekannteDNASequenz3OhneTeilstrings = entferneTeilstrings(unbekannteDNASequenz3);

        FileWriter writer = new FileWriter("C:" + File.separator + "Users" + File.separator + "dusti" + File.separator + "Desktop" + File.separator + "output.txt");
        for(String str: unbekannterTextOhneTeilstrings) {
            writer.write(str);
        }
        writer.close();

        String superString1 = GreedySuperstring(unbekannterTextOhneTeilstrings);
        String superString2 = GreedySuperstring(unbekannteDNASequenz1OhneTeilstrings);
        String superString3 = GreedySuperstring(unbekannteDNASequenz2OhneTeilstrings);
        String superString4 = GreedySuperstring(unbekannteDNASequenz3OhneTeilstrings);

        System.out.println(possible1.contains(superString1));
        System.out.println(possible2.contains(superString2));
        System.out.println(possible3.contains(superString3));
        System.out.println(possible4.contains(superString4));


        ausgabedesSuperstrings(superString1);
        ausgabedesSuperstrings(superString2);
        ausgabedesSuperstrings(superString3);
        ausgabedesSuperstrings(superString4);
    }

    //<editor-fold desc="Laden und Verarbeitung der Fragmente">
    /**
     * Liest eine Datei Zeile fuer Zeile ein.
     *
     * @param datei Datei, welche eingelesen werden soll
     * @throws IOException IOException, welche geworfen werden kann
     */
    public static List<String> ladeFragmente(File datei) throws IOException{
        List<String> fragmente = new ArrayList<String>();

        BufferedReader br = new BufferedReader(new FileReader(datei));

        String zeile = null;

        //Liest die Datei Zeile fuer Zeile ein
        while((zeile = br.readLine()) != null) {
            fragmente.add(zeile);
        }

        return fragmente;
    }

    /**
     * Entfernt alle Teilstrings aus der Fragmentliste
     *
     * @param fragmentListe Fragmentliste, aus welcher die Teilstrings entfernt werden muessen
     * @return Liste mit Teilstring-freien Fragmenten
     */
    public static List<String> entferneTeilstrings(List<String> fragmentListe){
        List<String> teilstringFreieListe = new ArrayList<String>();

        Set<String> uniqueFragmentListe = new HashSet<String>(fragmentListe);

        // Durchlaeuft alle Fragmente der Fragmentliste
        for(String fragment : uniqueFragmentListe){
            // Nur wenn das Fragment eine Laenge groesser 0 hat, muss es betrachtet werden
            if(fragment.length() > 0){
                List<String> fragmenteMitTeilstrings = new ArrayList<String>();

                // Sucht nach allen Fragmenten, welche das aktuelle Fragment als Teilstring haben
                for(String vergleichsFragment : uniqueFragmentListe){
                    // Wenn Vergleichsfragment eine Teilstring beinhaltet merken
                    if(vergleichsFragment.length() > 0 && vergleichsFragment.contains(fragment)){
                        fragmenteMitTeilstrings.add(vergleichsFragment);
                    }
                }

                // Wenn es keine weiteren Fragmente mit Teilstrings gibt, dann zu Teilstring-freien Liste hinzufuegen
                if(fragmenteMitTeilstrings.size() == 1){
                    teilstringFreieListe.add(fragmenteMitTeilstrings.get(0));
                }
            }
        }

        return teilstringFreieListe;
    }
    //</editor-fold>

    //<editor-fold desc="Der Greedy-Substring-Algorithmus">
    /**
     * Fuehrt den Greedy-Superstring-Algorithmus durch
     * @param fragmentListe Fragmentliste, die bearbeitet wird
     * @return Superstring
     */
    public static String GreedySuperstring(List<String> fragmentListe){
        List<Integer> fragmentIndizes;

        // Laeuft solange mehrere Fragmente vorhanden sind
        while(fragmentListe.size() > 1){
            int besteDeckung = 0;
            int indexBestesOverlap = 0;

            String fragment1 = null;
            String fragment2 = null;

            // Alle Fragmente muessen miteinander verglichen werden
            for(String fragment : fragmentListe) {
                for (String vergleichsFragment : fragmentListe) {

                    // Das gleiche Fragment darf nicht mit sich selbst verglichen werden
                    if (!fragment.equals(vergleichsFragment)) {
                        int indexAktuellesOverlap = 0;
                        int indexVergleichsFragment = 0;

                        int aktuelleDeckung = 0;

                        // Prueft jeden Buchstaben auf Ueberlappung
                        for (int k = 0; k < fragment.length(); k++) {
                            if(indexVergleichsFragment >= vergleichsFragment.length()){
                                indexAktuellesOverlap = 0;
                                aktuelleDeckung = 0;
                                indexVergleichsFragment = 0;
                            }

                            if (fragment.charAt(k) == vergleichsFragment.charAt(indexVergleichsFragment)) {
                                if(indexAktuellesOverlap == 0){
                                    indexAktuellesOverlap = k;
                                }

                                aktuelleDeckung++;
                                indexVergleichsFragment++;
                            } else {
                                indexAktuellesOverlap = 0;
                                indexVergleichsFragment = 0;
                                aktuelleDeckung = 0;

                                if(fragment.charAt(k) == vergleichsFragment.charAt(indexVergleichsFragment)){
                                    indexAktuellesOverlap = k;
                                    aktuelleDeckung++;
                                    indexVergleichsFragment++;
                                }
                            }
                        }

                        if (aktuelleDeckung > besteDeckung) {
                            besteDeckung = aktuelleDeckung;
                            indexBestesOverlap = indexAktuellesOverlap;

                            fragment1 = new String(fragment);
                            fragment2 = new String(vergleichsFragment);
                        } else if (aktuelleDeckung == 0 && besteDeckung == 0){
                            fragment1 = new String(fragment);
                            fragment2 = new String(vergleichsFragment);
                        }
                    }
                }
            }

            String gemergetesFragment = null;

            if(fragment1 != null && fragment2 != null && besteDeckung != 0){
                gemergetesFragment = mergeFragmente(fragment1, fragment2, indexBestesOverlap);
            } else if(fragment1 != null && fragment2 != null && besteDeckung == 0) {
                gemergetesFragment = mergeFragmente(fragment1, fragment2, indexBestesOverlap);
            }

            // Loesche jetzt gemergete Fragmente raus
            fragmentListe.remove(fragment1);
            fragmentListe.remove(fragment2);

            // Fuege gemergetes Fragment hinzu
            fragmentListe.add(gemergetesFragment);
        }

        return fragmentListe.get(0);
    }

    /**
     * Merged das aktuelle Fragment mit dem optimalen Fragment
     *
     * @param fragment Aktuelles Fragment
     * @param optimalesFragment Optimales Fragment
     * @param indexBestesOverlap Index an dem der Overlap im aktuellen Fragment beginnt
     * @return Das gemergete Fragment
     */
    public static String mergeFragmente(String fragment, String optimalesFragment, int indexBestesOverlap){
        String gemergetesFragment = null;

        if(indexBestesOverlap != 0){
            int indexRest = ((fragment.length() - 1) - indexBestesOverlap) + 1;

            gemergetesFragment = fragment + optimalesFragment.substring(indexRest);
        } else {
            gemergetesFragment = fragment + optimalesFragment;
        }

        return gemergetesFragment;
    }
    //</editor-fold>

    //<editor-fold desc="Ausgabemethoden">
    /**
     * Gibt einen Superstring aus.
     * @param superString Der Superstring der ausgegeben werden soll.
     */
    public static void ausgabedesSuperstrings(String superString){
        System.out.println("Superstring: " + superString);
    }
    //</editor-fold>
}
